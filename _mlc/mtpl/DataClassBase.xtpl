<?php
class <%= $className; %>Base extends BaseEntity {
	const DB_CONN = '<%= $db_conn_name; %>';
    const TABLE_NAME = '<%= $table->name; %>';
    const P_KEY = '<%= $pKey; %>';
    
    public function __construct(){
        $this->table = DB_PREFIX . self::TABLE_NAME;
		$this->pKey = self::P_KEY;
		$this->strDBConn = self::DB_CONN;
    }
 
	public static function LoadById($intId){
		$sql = sprintf("SELECT * FROM %s%s WHERE <%= $pKey; %> = %s;", DB_PREFIX, self::TABLE_NAME, $intId);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		while($data = mysql_fetch_assoc($result)){
			$tObj = new <%= $table->name; %>();
			$tObj->materilize($data);
			return $tObj;
		}
	}
	public static function LoadAll(){
		$sql = sprintf("SELECT * FROM %s%s;", $DB_PREFIX, self::TABLE_NAME);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		$coll = new BaseEntityCollection();
		while($data = mysql_fetch_assoc($result)){
			$tObj = new <%= $table->name; %>();
			$tObj->materilize($data);
			$coll->addItem($tObj);
		}
		return $coll;
	}
	public function ToXml($blnReclusive = false){
        $xmlStr = "";
        $xmlStr .= "<<%= $table->name; %>>";
        <% foreach ($fields as $field){ %>
        $xmlStr .= "<<%= $field; %>>";
        $xmlStr .= $this-><%= $field; %>;
        $xmlStr .= "</<%= $field; %>>";
        <% } %>
        if($blnReclusive){
           //Finish FK Rel stuff
        }
        $xmlStr .= "</<%= $table->name; %>>";
        return $xmlStr;
        
    }
   
	public static function Query($strExtra, $blnSingle = false){
		$sql = sprintf("SELECT * FROM %s %s;", self::TABLE_NAME,  $strExtra);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		$coll = new BaseEntityCollection();
		while($data = mysql_fetch_assoc($result)){
			$tObj = new <%= $table->name; %>();
			$tObj->materilize($data);
			$coll->addItem($tObj);
		}
		$arrResult = $coll->getCollection();
		if(!$blnSingle){
			return $arrResult;
		}else{
			if(count($arrResult) >= 0){
				return $arrResult[0];
			}else{
				return null;
			}
		}	
	}
	public static function QueryCount($strExtra){
		$sql = sprintf("SELECT * FROM %s %s;", self::TABLE_NAME,  $strExtra);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		$coll = new BaseEntityCollection();
		return mysql_num_rows($result)){
			
	}



     //Get children
    <% foreach ($childFields as $child){ %>
    public function Get<%= MLCTemplateDriver::capatilize($child->table->name); %>Arr(){
       return <%= MLCTemplateDriver::Capatilize($child->table->name); %>::LoadCollBy<%= MLCTemplateDriver::Capatilize($child->name); %>($this-><%= $child->varName; %>);
    }
	<% } %>

    //Load by foregin key
    <% foreach ($parentFields as $field){ %>
    public static function LoadCollBy<%= MLCTemplateDriver::capatilize($field->name); %>($<%= $field->varName; %>){
        $sql = sprintf("SELECT * FROM <%= $table->name; %> WHERE <%= $field->name; %> = %s;", $<%= $field->varName; %>);
		$result = MLCDBDriver::Query($sql);
		$coll = new BaseEntityCollection();
		while($data = mysql_fetch_assoc($result)){
			$obj<%= $className; %> = new <%= $className; %>();
			$obj<%= $className; %>->materilize($data);
			$coll->addItem($obj<%= $className; %>);
		}
		return $coll;
    }

    <% } %>
    
      public function LoadByTag($strTag){
	  	return MLCTagDriver::LoadTaggedEntites($strTag, get_class($this));
	  }
	       
    
	  public function AddTag($mixTag){
	  	return MLCTagDriver::AddTag($mixTag, $this);
	  }
	  
    public function ParseArray($arrData){
    	foreach($arrData as $strKey => $mixVal){
    		$arrData[strtolower($strKey)] = $mixVal;
    	}
       
        <% foreach ($table->getChildren() as $objField) { %>
            
             if(array_key_exists('<%= strtolower($objField->name) %>', $arrData)){
                $this-><%= $objField->varName %> = $arrData['<%= strtolower($objField->name) %>'];
             }
        <% } %>
    }
        
        
        
        
        
       public static function Parse($mixData, $blnReturnId = false){
        	if(is_numeric($mixData)){
        		if($blnReturnId){
        			return $mixData;
        		}
        		return <%= $table->name %>::Load($mixData);
        	}elseif(
        		(is_object($mixData)) && 
        		(get_class($mixData) == '<%= $className %>')
        	){
        		if(!$blnReturnId){
        			return $mixData;
        		}
        		return $mixData-><%= $table->pKeyField->varName %>;
        	}elseif(is_null($mixData)){
        		return null;
        	}else{
        		throw new Exception(__FUNCTION__ . '->Parse - Parameter 1 must be either an intiger or a class type "<%= $className %>"');
        	}        	
        }
        public function LoadByField( $strField, $mixValue, $strCompairison = '='){
			if(is_numeric($mixValue)){
				$strValue = $mixValue;
			}else{
				$strValue = sprintf('"%s"', $mixValue);
			} 
			$strExtra = sprintf(' WHERE %s %s %s', $strField, $strCompairison, $strValue);
			
			$sql = sprintf("SELECT * FROM %s %s;", self::TABLE_NAME, $strExtra);
			//die($sql);
			$result = MLCDBDriver::query($sql, self::DB_CONN);
			$coll = new BaseEntityCollection();
			while($data = mysql_fetch_assoc($result)){
				
				$tObj = new <%= $className; %>();
				$tObj->materilize($data);
				$coll->addItem($tObj);
			}
			$arrResults = $coll->getCollection();
			if(count($arrResults) == 0){
				return null;
			}elseif(count($arrResults) == 1){
				return $arrResults[0];
			}else{
				return $arrResults;
			}
			return ;
		}
        public function __toArray(){
        	$arrReturn = array();
            $arrReturn['_ClassName'] = "<%= $className %>";
            <% foreach ($table->fields as $objField) { %>   
                                 
                 $arrReturn['<%= $objField->name %>'] = $this-><%= $objField->name %>;
            <% } %>
            return $arrReturn;
        }
        public function __toJson($blnPosponeEncode = false){
        	$arrReturn = $this->__toArray();  
        	if($blnPosponeEncode){
        		return json_encode($arrReturn);
        	}else{
        		return $arrReturn;
        	} 
        }
}
?>
<?php
class MLCEntityModel<%= MLCTemplateDriver::Capatilize($name); %>ObjectBase extends MLCEntityModelObjectBase{
   
    protected $strClassName = '<%= MLCTemplateDriver::Capatilize($name); %>';
	public function  __call($strName, $arrArguments) {
		switch($strName){
			<% foreach ($parent_fields as $field){ %>
	       	case('<%= $field->reference->table->name; %>'):
				//Load 
				$obj<%= MLCTemplateDriver::capatilize($field->reference->table->name); %> = $this->GetEntity()-><%= MLCTemplateDriver::capatilize($field->name); %>;
				return new MLCEntityModel<%= MLCTemplateDriver::capatilize($field->reference->table->name); %>Object($obj<%= MLCTemplateDriver::capatilize($field->name); %>);
		    break;
		    <% } %>
			<% foreach ($child_fields as $child){ %>
	     	case('<%= $child['table']['name']; %>s'):
	       		$arr<%= MLCTemplateDriver::capatilize($child['table']['name']); %>s = <%= MLCTemplateDriver::capatilize($child['table']['name']); %>::LoadCollBy<%= MLCTemplateDriver::capatilize($child->name); %>($this->GetEntity()-><%= $child->name; %>)->GetCollection();
	       		$objResponse = new MLCEntityModelResponse($arr<%= MLCTemplateDriver::capatilize($child['table']['name']); %>s);
	       		$objResponse->BodyType = '<%= $child['table']['name']; %>';
	       		return $objResponse;
	    	break;
			<% } %>
			default:
				return parent::__call($strName, $arrArguments);
			
		}
	}
	
    
   
   
   	
}
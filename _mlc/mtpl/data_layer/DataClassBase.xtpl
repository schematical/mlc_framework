<?php
/**
 * Class Competition
<% foreach ($fields as $arrField) { %>
<% if ((!_mlc_is_special_field($arrField['name'],'*Data')) && ($arrField['name'] != 'data')) { %>
 * @property-read mixed $<%= MLCTemplateDriver::Capatilize($arrField['name']); %>
 * @property-write mixed $<%= MLCTemplateDriver::Capatilize($arrField['name']); %>
<% } %>
<% } %>
<% foreach ($parent_fields as $arrField){ %>
 * @property-read <%= MLCTemplateDriver::Capatilize($arrField['table']); %> $<%= MLCTemplateDriver::Capatilize($arrField['name']); %>Object
<% } %>
 */
class <%= MLCTemplateDriver::Capatilize($name); %>Base extends BaseEntity {
	const DB_CONN = 'DB_1';
    const TABLE_NAME = '<%= $full_name; %>';
    const P_KEY = '<%= $pkey; %>';
    <% foreach ($parent_fields as $arrField){ %>
            protected $obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %> = null;
    <% } %>

    public function __construct(){
        $this->table = DB_PREFIX . self::TABLE_NAME;
		$this->pKey = self::P_KEY;
		$this->strDBConn = self::DB_CONN;
    }
 
	public static function LoadById($intId){
		return self::Query('WHERE <%= $full_name; %>.<%= $pkey_field['name']; %> = ' . $intId, true);
	}
	public static function LoadAll(){

		$coll = new BaseEntityCollection(
		    self::Query('')
		);

		return $coll;
	}
	public function ToXml($blnReclusive = false){
        $xmlStr = "";
        $xmlStr .= "<<%= $name; %>>";
        <% foreach ($fields as $field){ %>
        $xmlStr .= "<<%= $field['name']; %>>";
        $xmlStr .= $this-><%= $field['name']; %>;
        $xmlStr .= "</<%= $field['name']; %>>";
        <% } %>
        if($blnReclusive){
           //Finish FK Rel stuff
        }
        $xmlStr .= "</<%= $name; %>>";
        return $xmlStr;
        
    }
    public function Materilize($arrData){

   		if(isset($arrData) && (sizeof($arrData) > 1)){
   		    if(array_key_exists('<%= $full_name; %>.<%= $pkey_field['name']; %>', $arrData)){
   		        //New Smart Way
                <% foreach ($fields as $objField) { %>
                    $this->arrDBFields['<%= $objField['name']; %>'] = $arrData['<%= $full_name; %>.<%= $objField['name']; %>'];
                <% } %>
                //Foregin Key
                <% foreach ($parent_fields as $objField) { %>
                    if(array_key_exists('<%= $data[$objField['reference']['table']]['full_name']; %>.<%= $objField['name']; %>', $arrData)){
                        $this->obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %> = new <%= $objField['reference']['table']; %>();
                        $this->obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %>->Materilize($arrData);
                    }
                <% } %>
            }else{
                //Old ways
   			    $this->arrDBFields = $arrData;
            }
   			$this->loaded = true;


   			$this->setId($this->getField($this->getPKey()));

   		}
   		if(self::$blnUseCache){
   			if(!array_key_exists(get_class($this), self::$arrCachedData)){
   				self::$arrCachedData[get_class($this)] = array();
   			}
   			self::$arrCachedData[get_class($this)][$this->getId()] = $this;
   		}
   	}
   	public static function GetSQLSelectFieldsAsArr($blnLongSelect = false){
   	    $arrFields = array();
        <% foreach ($fields as $objField) { %>
            $arrFields[] = '<%= $full_name; %>.<%= $objField['name']; %> ' . (($blnLongSelect)?' as "<%= $full_name; %>.<%= $objField['name']; %>"':'');
        <% } %>
        return $arrFields;
   	}
	public static function Query($strExtra, $blnReturnSingle = false, $arrJoins = null){
	    $blnLongSelect = !is_null($arrJoins);
        $arrFields = self::GetSQLSelectFieldsAsArr($blnLongSelect);
        if($blnLongSelect){
            foreach($arrJoins as $strTable){
                if(class_exists($strTable)){
                    $arrFields = array_merge(
                        $arrFields,
                        call_user_func($strTable . '::GetSQLSelectFieldsAsArr', true)
                    );
                }
            }
        }
        $strFields = implode(', ', $arrFields);
        $strJoin = '';
        if($blnLongSelect){
            foreach($arrJoins as $strTable){
                switch($strTable){
                    <% foreach ($parent_fields as $field){ %>
                    case('<%= $field['reference']['table']; %>'):
                    <% if ($data[$field['reference']['table']]['full_name'] != $field['reference']['table']){ %>
                        case('<%= $data[$field['reference']['table']]['full_name']; %>'):
                    <% } %>
                        $strJoin .=
                            ' JOIN <%= $data[$field['reference']['table']]['full_name']; %> ON <%= $full_name; %>.<%= $field['name']; %> = <%= $data[$field['reference']['table']]['full_name']; %>.<%= $field['name']; %>';
                    break;
                    <% } %>
                }
            }
        }
		$sql = sprintf("SELECT %s FROM <%= $full_name; %> %s %s;", $strFields, $strJoin, $strExtra);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		$arrReturn = array();
		while($data = mysql_fetch_assoc($result)){

			$tObj = new <%= $name; %>();
			$tObj->Materilize($data);
			$arrReturn[] = $tObj;
		}
		//$arrReturn = $coll->getCollection();
		if($blnReturnSingle){
			if(count($arrReturn) == 0){
				return null;
			}else{
				return $arrReturn[0];
			}	
		}else{
			return $arrReturn;
		}		
	}
	public static function QueryCount($strExtra = ''){
		$sql = sprintf("SELECT <%= $full_name; %>.* FROM <%= $full_name; %> %s;",  $strExtra);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		return mysql_num_rows($result);
			
	}
     //Get children
    <% foreach ($child_fields as $child){ %>
        <% if ($data[$child['table']]['type'] == 'entity'){ %>
            public function Get<%= MLCTemplateDriver::capatilize($child['table']); %>Arr(){
               return <%= MLCTemplateDriver::Capatilize($child['table']); %>::LoadCollBy<%= MLCTemplateDriver::Capatilize($child['name']); %>($this-><%= $child['name']; %>)->getCollection();
            }
        <% } %>

        <% if ($data[$child['table']]['type'] == 'rel'){ %>
            public function Get<%= MLCTemplateDriver::capatilize($child['table']); %>Arr($strExtra = ''){
               return <%= MLCTemplateDriver::capatilize($child['table']); %>::Query(
                    'WHERE <%= $data[$child['table']]['full_name']; %>.<%= $child['name']; %> = ' . $this-><%= $pkey_field['name']; %> . ' ' . $strExtra
               );
            }


            <% foreach ($data[$child['table']]['parent_fields'] as $ref) { %>

                <% if ($name != $ref['reference']['table']) { %>
                    public function Get<%= MLCTemplateDriver::capatilize($child['table']); %>ArrBy<%= MLCTemplateDriver::capatilize($ref['reference']['table']); %>($obj<%= MLCTemplateDriver::capatilize($ref['reference']['table']); %>, $strExtra = ''){
                       return <%= MLCTemplateDriver::capatilize($child['table']); %>::GetArrBy<%= $name; %>And<%= MLCTemplateDriver::capatilize($ref['reference']['table']); %>($this, $obj<%= MLCTemplateDriver::capatilize($ref['reference']['table']); %>, $strExtra);
                    }
                    public function Create<%= MLCTemplateDriver::capatilize($child['table']); %>From<%= MLCTemplateDriver::capatilize($ref['reference']['table']); %>($obj<%= MLCTemplateDriver::capatilize($ref['reference']['table']); %>){
                        $obj<%= MLCTemplateDriver::capatilize($child['table']); %> = new <%= MLCTemplateDriver::capatilize($child['table']); %>();
                        $obj<%= MLCTemplateDriver::capatilize($child['table']); %>-><%= MLCTemplateDriver::capatilize($child['name']); %> = $this-><%= MLCTemplateDriver::capatilize($child['name']); %>;
                        $obj<%= MLCTemplateDriver::capatilize($child['table']); %>-><%= MLCTemplateDriver::capatilize($ref['name']); %> = $obj<%= MLCTemplateDriver::capatilize($ref['reference']['table']); %>-><%= MLCTemplateDriver::capatilize($ref['name']); %>;
                        //$obj<%= MLCTemplateDriver::capatilize($child['table']); %>->Save();
                        return $obj<%= MLCTemplateDriver::capatilize($child['table']); %>;
                    }
                <% } %>
            <% } %>
        <% } %>
	<% } %>

    //Load by foregin key
    <% foreach ($parent_fields as $field){ %>
    public static function LoadCollBy<%= MLCTemplateDriver::capatilize($field['name']); %>($<%= $field['varName']; %>){
        $sql = sprintf("SELECT <%= $full_name; %>.* FROM <%= $full_name; %> WHERE <%= $field['name']; %> = %s;", $<%= $field['varName']; %>);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		$coll = new BaseEntityCollection();
		while($data = mysql_fetch_assoc($result)){
			$obj<%= MLCTemplateDriver::Capatilize($name); %> = new <%= MLCTemplateDriver::Capatilize($name); %>();
			$obj<%= MLCTemplateDriver::Capatilize($name); %>->materilize($data);
			$coll->addItem($obj<%= MLCTemplateDriver::Capatilize($name); %>);
		}
		return $coll;
    }

    <% } %>
    
      public function LoadByTag($strTag){
	  	return MLCTagDriver::LoadTaggedEntites($strTag, get_class($this));
	  }
	       
    
	  public function AddTag($mixTag){
	  	return MLCTagDriver::AddTag($mixTag, $this);
	  }
	  
    public function ParseArray($arrData){
    	foreach($arrData as $strKey => $mixVal){
    		$arrData[strtolower($strKey)] = $mixVal;
    	}
       
         <% foreach ($child_fields as $arrField) { %>
            
             if(array_key_exists('<%= strtolower($arrField['name']) %>', $arrData)){
                $this-><%= $arrField['varName'] %> = $arrData['<%= strtolower($arrField['name']) %>'];
             }
        <% } %>
    }
        
        
        
        
        
       public static function Parse($mixData, $blnReturnId = false){
        	if(is_numeric($mixData)){
        		if($blnReturnId){
        			return $mixData;
        		}
        		return <%= MLCTemplateDriver::Capatilize($name); %>::Load($mixData);
        	}elseif(
        		(is_object($mixData)) && 
        		(get_class($mixData) == '<%= MLCTemplateDriver::Capatilize($name); %>')
        	){
        		if(!$blnReturnId){
        			return $mixData;
        		}
        		return $mixData-><%= $pkey_field['varName'] %>;
        	}elseif(is_null($mixData)){
        		return null;
        	}else{
        		throw new Exception(__FUNCTION__ . ' - Parameter 1 must be either an intiger or a class type "<%= MLCTemplateDriver::Capatilize($name); %>"');
        	}        	
        }
        public static function LoadSingleByField( $strField, $mixValue, $strCompairison = '='){

            if(is_numeric($mixValue)){
                $strValue = $mixValue;
            }else{
                $strValue = sprintf('"%s"', $mixValue);
            }
            $strExtra = sprintf(' WHERE <%= $full_name; %>.%s %s %s', $strField, $strCompairison, $strValue);
            $objEntity = self::Query($strExtra, true);

            return $objEntity;
        }
        public static function LoadArrayByField( $strField, $mixValue, $strCompairison = '='){

			if(is_numeric($mixValue)){
				$strValue = $mixValue;
			}else{
				$strValue = sprintf('"%s"', $mixValue);
			} 
			$strExtra = sprintf(' WHERE <%= $full_name; %>.%s %s %s', $strField, $strCompairison, $strValue);
            $arrResults = self::Query($strExtra);

			return $arrResults;
		}
        public function __toArray(){
        	$arrReturn = array();
            $arrReturn['_ClassName'] = "<%= MLCTemplateDriver::Capatilize($name); %> %>";
            <% foreach ($fields as $arrField) { %>
                                 
                 $arrReturn['<%= $arrField['name'] %>'] = $this-><%= $arrField['name'] %>;
            <% } %>
            return $arrReturn;
        }
         public function __toString(){

            return '<%= MLCTemplateDriver::Capatilize($name); %>(' . $this->getId() . ')';
        }
        public function __toJson($blnPosponeEncode = false){
        	$arrReturn = $this->__toArray();  
        	if($blnPosponeEncode){
        		return json_encode($arrReturn);
        	}else{
        		return $arrReturn;
        	} 
        }
        public function __get($strName){
	        switch($strName){
	        	<% foreach ($fields as $arrField) { %>
	        	<% if ((_mlc_is_special_field($arrField['name'],'id*')) || (!_mlc_is_special_field($arrField['name'],'*Data')) && ($arrField['name'] != 'data')) { %>
                    case('<%= MLCTemplateDriver::Capatilize($arrField['name']); %>'):
                    case('<%= $arrField['name'] %>'):
                        if(array_key_exists('<%= $arrField['name'] %>', $this->arrDBFields)){
                            return $this->arrDBFields['<%= $arrField['name'] %>'];
                        }
                        return null;
                    break;
                <% } %>
	        	<% } %>
	        	<% foreach ($parent_fields as $arrField){ %>
                case('<%= MLCTemplateDriver::Capatilize($arrField['name']); %>Object'):
                    if(!is_null($this->obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %>)){
                        return $this->obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %>;
                    }
	   				if(
	   				    (array_key_exists('<%= $arrField['name'] %>', $this->arrDBFields)) &&
	   				    (!is_null($this->arrDBFields['<%= $arrField['name'] %>']))
                    ){
	        			$this->obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %> =  <%= MLCTemplateDriver::Capatilize($arrField['reference']['table']); %>::LoadById(
	        			    $this->arrDBFields['<%= $arrField['name'] %>']
                        );
                        return $this->obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %>;
	        		}
	        		return null;
	        	break;
	        	<% } %>
	        	default:
	        		throw new MLCMissingPropertyException($this, $strName);
	        	break;
	        }
	       
	    }
	    public function __set($strName, $strValue){
	   		$this->modified = 1;
	   		switch($strName){
	   			<% foreach ($fields as $arrField) { %>
                    <% if ((_mlc_is_special_field($arrField['name'],'id*')) || (!_mlc_is_special_field($arrField['name'],'*Data')) && ($arrField['name'] != 'data')) { %>
                    case('<%= MLCTemplateDriver::Capatilize($arrField['name']); %>'):
                    case('<%= $arrField['name'] %>'):
                        $this->arrDBFields['<%= $arrField['name'] %>'] = $strValue;
                        <% if (array_key_exists('reference', $arrField)) { %>
                            $this->obj<%= MLCTemplateDriver::Capatilize($arrField['reference']['name']); %> = null;
                        <% } %>
                    break;
                    <% } %>
	        	<% } %>
	        	<% foreach ($parent_fields as $arrField){ %>
                    case('<%= MLCTemplateDriver::Capatilize($arrField['name']); %>Object'):
                        $this->arrDBFields['<%= $arrField['name'] %>'] = $strValue-><%= $arrField['name'] %>;
                        $this->obj<%= MLCTemplateDriver::Capatilize($arrField['name']); %> = $strValue;
                    break;
                <% } %>
	        	default:
	        		throw new MLCMissingPropertyException($this, $strName);
	        	break;
	        }
	    }
	    <% foreach ($fields as $arrField) { %>
	        <% if ((_mlc_is_special_field($arrField['name'],'*Data')) || ($arrField['name'] == 'data')) { %>
                public function <%= MLCTemplateDriver::Capatilize($arrField['name']); %>($strKey, $mixData = null){
                    if(is_null($mixData)){
                        if(
                            (!array_key_exists('<%= $arrField['name'] %>', $this->arrDBFields))
                        ){
                            return null;
                        }
                        if(
                            (strlen($this->arrDBFields['<%= $arrField['name'] %>']) < 1)
                        ){
                            return null;
                        }
                        $arrData = json_decode($this->arrDBFields['<%= $arrField['name'] %>'], true);
                        if(!array_key_exists($strKey, $arrData)){
                            return null;
                        }
                        return $arrData[$strKey];
                    }else{
                        if(
                            (!array_key_exists('<%= $arrField['name'] %>', $this->arrDBFields)) ||
                            (strlen($this->arrDBFields['<%= $arrField['name'] %>']) < 1)
                        ){
                            $arrData = array();
                        }else{
                            $arrData = json_decode($this->arrDBFields['<%= $arrField['name'] %>'], true);
                        }
                        $arrData[$strKey] = $mixData;
                        $this->arrDBFields['<%= $arrField['name'] %>'] = json_encode($arrData);
                        $this->Save();
                    }
                }
            <% } %>
        <% } %>
}
?>
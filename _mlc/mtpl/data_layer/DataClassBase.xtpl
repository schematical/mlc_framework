<?php
/**
 * Class Competition
<% foreach ($fields as $arrField) { %>
 * @property-read mixed $<%= MLCTemplateDriver::Capatilize($arrField['name']); %>
 * @property-write mixed $<%= MLCTemplateDriver::Capatilize($arrField['name']); %>
<% } %>
<% foreach ($parent_fields as $arrField){ %>
 * @property-read <%= MLCTemplateDriver::Capatilize($arrField['table']); %> $<%= MLCTemplateDriver::Capatilize($arrField['name']); %>Object
<% } %>
 */
class <%= MLCTemplateDriver::Capatilize($name); %>Base extends BaseEntity {
	const DB_CONN = 'DB_1';
    const TABLE_NAME = '<%= $full_name; %>';
    const P_KEY = '<%= $pkey; %>';
    
    public function __construct(){
        $this->table = DB_PREFIX . self::TABLE_NAME;
		$this->pKey = self::P_KEY;
		$this->strDBConn = self::DB_CONN;
    }
 
	public static function LoadById($intId){
		$sql = sprintf("SELECT * FROM %s WHERE <%= $pkey; %> = %s;", self::TABLE_NAME, $intId);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		while($data = mysql_fetch_assoc($result)){
			$tObj = new <%= $name; %>();
			$tObj->materilize($data);
			return $tObj;
		}
	}
	public static function LoadAll(){
		$sql = sprintf("SELECT * FROM %s;", self::TABLE_NAME);
		$result = MLCDBDriver::Query($sql, <%= MLCTemplateDriver::Capatilize($name); %>::DB_CONN);
		$coll = new BaseEntityCollection();
		while($data = mysql_fetch_assoc($result)){
			$tObj = new <%= $name; %>();
			$tObj->materilize($data);
			$coll->addItem($tObj);
		}
		return $coll;
	}
	public function ToXml($blnReclusive = false){
        $xmlStr = "";
        $xmlStr .= "<<%= $name; %>>";
        <% foreach ($fields as $field){ %>
        $xmlStr .= "<<%= $field['name']; %>>";
        $xmlStr .= $this-><%= $field['name']; %>;
        $xmlStr .= "</<%= $field['name']; %>>";
        <% } %>
        if($blnReclusive){
           //Finish FK Rel stuff
        }
        $xmlStr .= "</<%= $name; %>>";
        return $xmlStr;
        
    }
   
	public static function Query($strExtra, $blnReturnSingle = false){
		$sql = sprintf("SELECT * FROM %s %s;", self::TABLE_NAME,  $strExtra);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		$coll = new BaseEntityCollection();
		while($data = mysql_fetch_assoc($result)){
			$tObj = new <%= $name; %>();
			$tObj->materilize($data);
			$coll->addItem($tObj);
		}
		$arrReturn = $coll->getCollection();
		if($blnReturnSingle){
			if(count($arrReturn) == 0){
				return null;
			}else{
				return $arrReturn[0];
			}	
		}else{
			return $arrReturn;
		}		
	}
	public static function QueryCount($strExtra = ''){
		$sql = sprintf("SELECT * FROM %s %s;", self::TABLE_NAME,  $strExtra);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		return mysql_num_rows($result);
			
	}
     //Get children
    <% foreach ($child_fields as $child){ %>
    public function Get<%= MLCTemplateDriver::capatilize($child['table']); %>Arr(){
       return <%= MLCTemplateDriver::Capatilize($child['table']); %>::LoadCollBy<%= MLCTemplateDriver::Capatilize($child['name']); %>($this-><%= $child['name']; %>);
    }
	<% } %>

    //Load by foregin key
    <% foreach ($parent_fields as $field){ %>
    public static function LoadCollBy<%= MLCTemplateDriver::capatilize($field['name']); %>($<%= $field['varName']; %>){
        $sql = sprintf("SELECT * FROM <%= $name; %> WHERE <%= $field['name']; %> = %s;", $<%= $field['varName']; %>);
		$result = MLCDBDriver::Query($sql, self::DB_CONN);
		$coll = new BaseEntityCollection();
		while($data = mysql_fetch_assoc($result)){
			$obj<%= MLCTemplateDriver::Capatilize($name); %> = new <%= MLCTemplateDriver::Capatilize($name); %>();
			$obj<%= MLCTemplateDriver::Capatilize($name); %>->materilize($data);
			$coll->addItem($obj<%= MLCTemplateDriver::Capatilize($name); %>);
		}
		return $coll;
    }

    <% } %>
    
      public function LoadByTag($strTag){
	  	return MLCTagDriver::LoadTaggedEntites($strTag, get_class($this));
	  }
	       
    
	  public function AddTag($mixTag){
	  	return MLCTagDriver::AddTag($mixTag, $this);
	  }
	  
    public function ParseArray($arrData){
    	foreach($arrData as $strKey => $mixVal){
    		$arrData[strtolower($strKey)] = $mixVal;
    	}
       
         <% foreach ($child_fields as $arrField) { %>
            
             if(array_key_exists('<%= strtolower($arrField['name']) %>', $arrData)){
                $this-><%= $arrField['varName'] %> = $arrData['<%= strtolower($arrField['name']) %>'];
             }
        <% } %>
    }
        
        
        
        
        
       public static function Parse($mixData, $blnReturnId = false){
        	if(is_numeric($mixData)){
        		if($blnReturnId){
        			return $mixData;
        		}
        		return <%= MLCTemplateDriver::Capatilize($name); %>::Load($mixData);
        	}elseif(
        		(is_object($mixData)) && 
        		(get_class($mixData) == '<%= MLCTemplateDriver::Capatilize($name); %>')
        	){
        		if(!$blnReturnId){
        			return $mixData;
        		}
        		return $mixData-><%= $pkey_field['varName'] %>;
        	}elseif(is_null($mixData)){
        		return null;
        	}else{
        		throw new Exception(__FUNCTION__ . ' - Parameter 1 must be either an intiger or a class type "<%= MLCTemplateDriver::Capatilize($name); %>"');
        	}        	
        }
        public static function LoadSingleByField( $strField, $mixValue, $strCompairison = '='){
        	$arrResults = self::LoadArrayByField($strField, $mixValue, $strCompairison);
        	if(count($arrResults)){
        		return $arrResults[0];
        	}
        	return null;
        }
        public static function LoadArrayByField( $strField, $mixValue, $strCompairison = '='){
			if(is_numeric($mixValue)){
				$strValue = $mixValue;
			}else{
				$strValue = sprintf('"%s"', $mixValue);
			} 
			$strExtra = sprintf(' WHERE %s %s %s', $strField, $strCompairison, $strValue);
			
			$sql = sprintf("SELECT * FROM %s %s;", self::TABLE_NAME, $strExtra);
			//die($sql);
			$result = MLCDBDriver::query($sql, self::DB_CONN);
			$coll = new BaseEntityCollection();
			while($data = mysql_fetch_assoc($result)){
				
				$tObj = new <%= MLCTemplateDriver::Capatilize($name); %>();
				$tObj->materilize($data);
				$coll->addItem($tObj);
			}
			$arrResults = $coll->getCollection();
			
			return $arrResults;
		}
        public function __toArray(){
        	$arrReturn = array();
            $arrReturn['_ClassName'] = "<%= MLCTemplateDriver::Capatilize($name); %> %>";
            <% foreach ($fields as $arrField) { %>
                                 
                 $arrReturn['<%= $arrField['name'] %>'] = $this-><%= $arrField['name'] %>;
            <% } %>
            return $arrReturn;
        }
         public function __toString(){

            return '<%= MLCTemplateDriver::Capatilize($name); %>(' . $this->getId() . ')';
        }
        public function __toJson($blnPosponeEncode = false){
        	$arrReturn = $this->__toArray();  
        	if($blnPosponeEncode){
        		return json_encode($arrReturn);
        	}else{
        		return $arrReturn;
        	} 
        }
        public function __get($strName){
	        switch($strName){
	        	<% foreach ($fields as $arrField) { %>
	   			case('<%= MLCTemplateDriver::Capatilize($arrField['name']); %>'): 
	   			case('<%= $arrField['name'] %>'): 
	   				if(array_key_exists('<%= $arrField['name'] %>', $this->arrDBFields)){
	        			return $this->arrDBFields['<%= $arrField['name'] %>'];
	        		}
	        		return null;
	        	break;
	        	<% } %>
	        	<% foreach ($parent_fields as $arrField){ %>
                case('<%= MLCTemplateDriver::Capatilize($arrField['name']); %>Object'):
                case('<%= $field['name'] %>Object'):
	   				if(
	   				    (array_key_exists('<%= $arrField['name'] %>', $this->arrDBFields)) &&
	   				    (!is_null($this->arrDBFields['<%= $arrField['name'] %>']))
                    ){
	        			return <%= MLCTemplateDriver::Capatilize($arrField['reference']['table']); %>::LoadById(
	        			    $this->arrDBFields['<%= $arrField['name'] %>']
                        );
	        		}
	        		return null;
	        	break;
	        	<% } %>
	        	default:
	        		throw new MLCMissingPropertyException($this, $strName);
	        	break;
	        }
	       
	    }
	    public function __set($strName, $strValue){
	   		$this->modified = 1;
	   		switch($strName){
	   			<% foreach ($fields as $arrField) { %>
	   			case('<%= MLCTemplateDriver::Capatilize($arrField['name']); %>'): 
	   			case('<%= $arrField['name'] %>'): 
	        		$this->arrDBFields['<%= $arrField['name'] %>'] = $strValue;
	        	break;
	        	<% } %>
	        	default:
	        		throw new MLCMissingPropertyException($this, $strName);
	        	break;
	        }
	    }
}
?>